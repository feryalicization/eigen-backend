generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  deletedAt DateTime?
  deletedBy Int?
  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?

  users User[]
}

model User {
  id          Int       @id @default(autoincrement())
  code        String?   @unique
  name        String
  email       String    @unique
  password    String
  roleId      Int
  role        Role      @relation(fields: [roleId], references: [id])
  isActive    Boolean   @default(true)
  isPenalty   Boolean   @default(false)
  penaltyUntil DateTime? // Menyimpan tanggal akhir hukuman
  deletedAt   DateTime?
  deletedBy   Int?
  createdAt   DateTime  @default(now())
  createdBy   Int?
  updatedAt   DateTime  @updatedAt
  updatedBy   Int?

  borrows Borrow[]
}

model Book {
  id        Int       @id @default(autoincrement())
  code      String?   @unique
  title     String
  author    String
  quantity  Int       @default(1)
  deletedAt DateTime?
  deletedBy Int?
  createdAt DateTime  @default(now())
  createdBy Int?
  updatedAt DateTime  @updatedAt
  updatedBy Int?

  borrows Borrow[]
}

model Borrow {
  id         Int       @id @default(autoincrement())
  userId     Int
  bookId     Int
  borrowedAt DateTime  @default(now())
  returnedAt DateTime?
  dueDate    DateTime  // Tanggal jatuh tempo (7 hari dari borrow date)
  isLate     Boolean   @default(false)

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}
